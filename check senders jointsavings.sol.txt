pragma solidity ^0.5.0;

contract another {
  address payable account_one = 0xb52D4b163e52A6d54151dDeB5FdD82a26b09f55d;
  address payable account_two = 0xFfBf91B5861BB94709826Df227D6BE0aaF46AC20;

  // last to withdraw variables 
  address public last_to_withdraw;
  uint public last_withdraw_block;
  uint public last_withdraw_amount;

 // Last to deposit variables 
  address public last_to_deposit;
  uint public last_deposit_block;
  uint public last_deposit_amount;
  
  uint unlock_time; // lets set up time 
  

  function withdraw(uint amount) public {
      require(unlock_time < now , "Account is locked!");
    require(msg.sender == account_one || msg.sender == account_two, "You don't own this account!");

    // check if sender is last to withdraw, and update if they were not 
    if (last_to_withdraw != msg.sender) {
      last_to_withdraw = msg.sender;
    }
// update last to withdraw info 
    last_withdraw_block = block.number;
    last_withdraw_amount = amount;

    msg.sender.transfer(amount);
  }

  function deposit() public payable {

   // check if sender is last to deposit, and update if they were not 
    if (last_to_deposit != msg.sender) {
      last_to_deposit = msg.sender;
    }

   // update last to deposit information 
   
    last_deposit_block = block.number;
    last_deposit_amount = msg.value;
  }

  function() external payable {}
}
